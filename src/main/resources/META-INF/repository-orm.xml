<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
                 version="2.1">

    <!-- Named Queries for StudentRepository -->
    <named-query name="Student.findByRollNumber">
        <query>SELECT s FROM Student s WHERE s.rollNumber = :rollNumber</query>
    </named-query>
    
    <named-query name="Student.findByNameContaining">
        <query>SELECT s FROM Student s WHERE LOWER(s.name) LIKE LOWER(CONCAT('%', :name, '%'))</query>
    </named-query>
    
    <!-- Named Queries for SubjectRepository -->
    <named-query name="Subject.findByName">
        <query>SELECT s FROM Subject s WHERE s.name = :name</query>
    </named-query>
    
    <named-query name="Subject.findByNameContaining">
        <query>SELECT s FROM Subject s WHERE LOWER(s.name) LIKE LOWER(CONCAT('%', :name, '%'))</query>
    </named-query>
    
    <!-- Named Queries for MarksRepository -->
    <named-query name="Marks.findByStudentAndSubject">
        <query>SELECT m FROM Marks m WHERE m.student.id = :studentId AND m.subject.id = :subjectId</query>
    </named-query>
    
    <named-query name="Marks.findByExamType">
        <query>SELECT m FROM Marks m WHERE m.examType = :examType</query>
    </named-query>
    
    <named-query name="Marks.findByStudentAndExamType">
        <query>SELECT m FROM Marks m WHERE m.student.id = :studentId AND m.examType = :examType</query>
    </named-query>
    
    <named-query name="Marks.findBySubjectAndExamType">
        <query>SELECT m FROM Marks m WHERE m.subject.id = :subjectId AND m.examType = :examType</query>
    </named-query>
    
    <!-- Special Queries for Top Rankers -->
    <named-native-query name="Marks.findTop3Students" result-class="com.example.marksmgmt.model.Student">
        <query>
            SELECT s.* FROM students s
            JOIN (
                SELECT m.student_id, SUM(m.marks) as total_marks
                FROM marks m
                GROUP BY m.student_id
                ORDER BY total_marks DESC
                LIMIT 3
            ) r ON s.id = r.student_id
        </query>
    </named-native-query>
    
    <named-native-query name="Marks.findTop3StudentsByExamType" result-class="com.example.marksmgmt.model.Student">
        <query>
            SELECT s.* FROM students s
            JOIN (
                SELECT m.student_id, SUM(m.marks) as total_marks
                FROM marks m
                WHERE m.exam_type = :examType
                GROUP BY m.student_id
                ORDER BY total_marks DESC
                LIMIT 3
            ) r ON s.id = r.student_id
        </query>
    </named-native-query>
    
    <named-native-query name="Marks.getStudentTotalMarksByExamType" result-set-mapping="StudentMarksMapping">
        <query>
            SELECT s.id as student_id, s.name as student_name, s.roll_number,
                   SUM(m.marks) as total_marks
            FROM students s
            JOIN marks m ON s.id = m.student_id
            WHERE m.exam_type = :examType
            GROUP BY s.id, s.name, s.roll_number
            ORDER BY total_marks DESC
        </query>
    </named-native-query>
    
    <named-native-query name="Marks.getStudentTotalMarks" result-set-mapping="StudentMarksMapping">
        <query>
            SELECT s.id as student_id, s.name as student_name, s.roll_number, 
                   SUM(m.marks) as total_marks
            FROM students s
            JOIN marks m ON s.id = m.student_id
            GROUP BY s.id, s.name, s.roll_number
            ORDER BY total_marks DESC
        </query>
    </named-native-query>
    
    <!-- SQL Result Set Mappings -->
    <sql-result-set-mapping name="StudentMarksMapping">
        <constructor-result target-class="com.example.marksmgmt.dto.StudentMarksDto">
            <column name="student_id" class="java.lang.Long"/>
            <column name="student_name" class="java.lang.String"/>
            <column name="roll_number" class="java.lang.String"/>
            <column name="total_marks" class="java.lang.Double"/>
        </constructor-result>
    </sql-result-set-mapping>
    
</entity-mappings> 